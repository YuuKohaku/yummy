cmdhistory=["(pr-str ())" "pr-str" "(pr-str)" "(str)" "(pr-str nil)" "(re-seq \#\\"\\\\w+|[.]{2}|(?<\=\\\\[)[0-9]+(?\=\\\\])\\" \\"par.child\\")" "(re-seq \#\\"\\\\w+|[.]{2}|(?<\=\\\\[)[0-9]+(?\=\\\\])\\" \\"par.child/sdfd@fgd[f\=3]\\")" "~@{l}" "@{\:d 123}" "~@{\:d 123}" "vector? '()" "(vector? (1 2 3))" "(vector? '(1 2 3))" "(cons '() {\:a \:asas \:b []})" "(conj '() {\:a \:asas \:b []})" "(conj ({\:a \:asas, \:b []}) ({\:a \:asas, \:b []}))" "(conj '({\:a \:asas, \:b []}) '({\:a \:asas, \:b []}))" "(conj ({\:a \:asas, \:b []}) '({\:a \:asas, \:b []}))" "(conj '({\:a \:asas, \:b []}) ({\:a \:asas, \:b []}))" "(split \#\\"@\\" \\"tagname@[key\=val]\\")" "(str/split \#\\"@\\" \\"tagname@[key\=val]\\")" "(str/split  \\"tagname@[key\=val]\\" \#\\"@\\")" "(edn/read-string (second (str/split  \\"tagname@[key\=val]\\" \#\\"@\\")))" "(require [clojure.edn \:as edn])" "(read-string (second (str/split  \\"tagname@[key\=val]\\" \#\\"@\\")))" "(edn/read-string (second (str/split  \\"tagname@{\:key\=val}\\" \#\\"@\\")))" "(read-string (second (str/split  \\"tagname@[key\=val]\\" \#\\"@\\")))" "(read-string (second (str/split  \\"tagname@{key\=val}\\" \#\\"@\\")))" "(read-string (second (str/split  \\"tagname@{key\:val}\\" \#\\"@\\")))" "(read-string (second (str/split  \\"tagname@{key val}\\" \#\\"@\\")))" "{\\"key\\" \= \\"val\\"}" "(re-seq \#\\"\\\\w+\\" (second (str/split  \\"tagname@[key\=val key1\=val1]\\" \#\\"@\\")))" "(hash-map (re-seq \#\\"\\\\w+\\" (second (str/split  \\"tagname@[key\=val key1\=val1]\\" \#\\"@\\"))))" "(apply hash-map (re-seq \#\\"\\\\w+\\" (second (str/split  \\"tagname@[key\=val key1\=val1]\\" \#\\"@\\"))))" "(flatten ({\:k 5} ({\:f 5}{\:g 8})))" "(seq ({\:k 5} ({\:f 5}{\:g 8})))" "(vector ({\:k 5} ({\:f 5}{\:g 8})))" "(flatten ({\:k 5} ({\:f 5} {\:g 8})))" "(vec ({\:k 5} ({\:f 5} {\:g 8})))" "(concat ({\:k 5}) ({\:f 5} {\:g 8}))" "(concat '({\:k 5}) '({\:f 5} {\:g 8}))" "(flatten '({\:k 5} '({\:f 5} {\:g 8})))" "(flatten '({\:k 5} ({\:f 5} {\:g 8})))" "((fn [elem exp] (filter \#(\= (keyword elem) (% \:tag)) (exp \:content))) \\"c\\" {\:tag \:a \:content [\\"text\\" {\:tag \:c \:content []} {\:tag \:c \:content [1]} ]})" "((fn [elem exp] (filter \#(and (yummy-object? exp) (\= (keyword elem) (% \:tag))) (exp \:content))) \\"c\\" {\:tag \:a \:content [\\"text\\" {\:tag \:c \:content []} {\:tag \:c \:content [1]} ]})" "(str/split \\"*/c\\" \\"/\\")" "(str/split \\"*/c\\" \#\\"/\\")" "(retrieve {\:tag \:a \:content []} \\"a\\")" "(retrieve {\:tag \:a \:content [] \:attrs {}} \\"a\\")" "(str/split \#\\"@\\" \\"tralala\\")" "(str/split  \\"tralala\\" \#\\"@\\")" "(compare {} {})" "(compare {\:a \:b \:c [\\"d\\"]} {\:c [\\"d\\"] \:a \:b})" "(diff {\:a \:b \:c [\\"d\\"]} {\:c [\\"d\\"] \:a \:b})" "(clojure.data/diff {\:a \:b \:c [\\"d\\"]} {\:c [\\"d\\"] \:a \:b})" "(use 'clojure.data)" "(diff {\:a \:b \:c [\\"d\\"]} {\:c [\\"d\\"] \:a \:b})" "(map-cmp {\:a \:b \:c [\\"d\\"]} {\:c [\\"d\\"] \:a \:b})" "(map-cmp {\:a \:b \:c [\\"e\\"]} {\:c [\\"d\\"] \:a \:b})" "(map-cmp {\:a \:b \:c [\\"d\\"] \:d {\:k \\"v\\"}} {\:c [\\"d\\"] \:a \:b \:d {\:k \\"v\\"}})" "(map-cmp {\:a \:b \:c [\\"d\\"] \:d {\:k \\"v\\"}} {\:c [\\"d\\"] \:a \:b \:d {\:k \\"w\\"}})" "(str/split \\"[key\=val,k\=3]\\" \#\\"\=[],.\\")" "(re-seq \#\\"\\\\w+\\" \\"[key\=val,k\=3]\\")" "(yummy-object? {\:tag \:a \:attrs {} \:content []})" "(yummy-object? {\:tag \:a \:attrs {\:k \\"c\\"} \:content []})" "(yummy-object? {\:tag \:a \:attrs {\:k 3} \:content []})" "(yummy-object? {\:tag \:a \:attrs {\\"k\\" \\"c\\"} \:content []})" "(get-attrs [\\"a\\" \\"[key\=val,k\=2]\\"])" "(diff  {\:key val, \:k 5} {\:key val})" "(not-any? false? '(false false))" "(any? false? '(false false))" "(every? false? '(false false))" "(reduce \#(if (\= %2 \\"..\\") (pop %1) (cons %2 %1)) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") (pop %1) (into %2 %1)) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") (pop %1) (conj %1 %2)) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") ((println \\"removing\\")(pop %1)) ((println \\"adding \\" %1)(conj %1 %2))) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") ((println \\"removing\\")(pop %1)) ((println \\"adding \\" %2)(conj %1 %2))) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") ((println \\"removing\\") (pop %1)) ((println \\"adding \\" %2) (conj %1 %2))) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") (pop %1) (conj %1 %2)) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") (pop %1) (conj %1 %2)) [] [\\"a\\" \\"b\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") (pop %1) (conj %1 %2)) [] [\\"a\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (and (\= %2 \\"..\\") (not-empty %1)) (pop %1) (conj %1 %2)) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(str/split \\"//af/sd/df\\" \#\\"/\\")" "(str/split \\"$/af/sd/df\\" \#\\"/\\")" "(rest [\\"$\\" \\"af\\" \\"sd\\" \\"df\\"])" "(next [\\"$\\" \\"af\\" \\"sd\\" \\"df\\"])" "(hash-map [1 2 3] [4 5 6])" "(array-map [1 2 3] [4 5 6])" "(assoc {} [1 2 3] [4 5 6])" "(vector (1 2 3) (5 5))" " (vector '(1 2 3) '(5 5))" "(flatten (vector '(1 2 3) '(5 5)))" "(into [2 3 5] 6)" "(into [2 3 5] [6])" "(assoc {\:l 5 \:u 8} {\:l 6 \:u []})" "(merge {\:l 5 \:u 8} {\:l 6 \:u []})" "(empty? \\"\\")" "(\= \:c \:c)" "(\= \:c \:\u0441)" "(map-cmp  {} {})" "(set-tag \\"b/c\\" tst-tag re-tag)" "(str \:c)" "(stringify \:c)" "(def tst-tag {\:tag \:a \\r\\n              \:attrs {\:key \\"val\\" }\\r\\n              \:content [23\\r\\n                        25\\r\\n                        {\:tag \:c\\r\\n                         \:attrs {}\\r\\n                         \:content [65 \\r\\n                                   {\:tag \:e\\r\\n                                    \:attrs {\:k \\"5\\"}\\r\\n                                    \:content [\\"branch\\"\\r\\n                                              {\:tag \:c\\r\\n                                               \:attrs {}\\r\\n                                               \:content [58]}]\\r\\n                                    }]\\r\\n                         }\\r\\n                        {\:tag \:b\\r\\n                         \:attrs {}\\r\\n                         \:content [{\:tag \:c\\r\\n                                    \:attrs {\:key \\"val\\" \:k \\"5\\"}\\r\\n                                    \:content [2 3]}\\r\\n                                   {\:tag \:d \\r\\n                                    \:attrs {\:key \\"val\\"} \\r\\n                                    \:content [2\\r\\n                                              3\\r\\n                                              {\:tag \:c\\r\\n                                               \:attrs {}\\r\\n                                               \:content [85\\r\\n                                                         {\:tag \:t\\r\\n                                                          \:attrs {}\\r\\n                                                          \:content []}\\r\\n                                                         ]}\\r\\n                                              ]}\\r\\n                                   ]}\\r\\n                        ]})" "(def foo (ref tst-tag))" "foo" "(dosync (ref-set (foo \:attrs) {}))" "(dosync (ref-set (@foo \:attrs) {}))" "(map? {})" "(not-empty {})" "(not-empty {\:j \:d})" "(defmulti vangog fn[x] x)" "(defmulti vangog (fn[x] x))" "(defmethod vangog \:key [params] \\"Key\!\\")" "(defmethod vangog \:k [params] params)" "(vangog \:key {\:j \:j})" "(vangog \:key)" "(vangog \:k)" "(defmulti vangog (fn[x y] x))" "(defmulti van (fn[x y] x))" "(defmethod van \:key [x y] y)" "van \:key 11" "(van \:key 11)" "(number? \\"1\\")" "(number? (num \\"1\\"))" "(number? (read-string \\"1\\"))" " (number? (read-string \\"a\\"))" " (number? (read-string 1))" "(fill-in \:append [1 2 3] 6 0)"]
eclipse.preferences.version=1
