cmdhistory=["(pr-str ())" "pr-str" "(pr-str)" "(str)" "(pr-str nil)" "(re-seq \#\\"\\\\w+|[.]{2}|(?<\=\\\\[)[0-9]+(?\=\\\\])\\" \\"par.child\\")" "(re-seq \#\\"\\\\w+|[.]{2}|(?<\=\\\\[)[0-9]+(?\=\\\\])\\" \\"par.child/sdfd@fgd[f\=3]\\")" "~@{l}" "@{\:d 123}" "~@{\:d 123}" "vector? '()" "(vector? (1 2 3))" "(vector? '(1 2 3))" "(cons '() {\:a \:asas \:b []})" "(conj '() {\:a \:asas \:b []})" "(conj ({\:a \:asas, \:b []}) ({\:a \:asas, \:b []}))" "(conj '({\:a \:asas, \:b []}) '({\:a \:asas, \:b []}))" "(conj ({\:a \:asas, \:b []}) '({\:a \:asas, \:b []}))" "(conj '({\:a \:asas, \:b []}) ({\:a \:asas, \:b []}))" "(split \#\\"@\\" \\"tagname@[key\=val]\\")" "(str/split \#\\"@\\" \\"tagname@[key\=val]\\")" "(str/split  \\"tagname@[key\=val]\\" \#\\"@\\")" "(edn/read-string (second (str/split  \\"tagname@[key\=val]\\" \#\\"@\\")))" "(require [clojure.edn \:as edn])" "(read-string (second (str/split  \\"tagname@[key\=val]\\" \#\\"@\\")))" "(edn/read-string (second (str/split  \\"tagname@{\:key\=val}\\" \#\\"@\\")))" "(read-string (second (str/split  \\"tagname@[key\=val]\\" \#\\"@\\")))" "(read-string (second (str/split  \\"tagname@{key\=val}\\" \#\\"@\\")))" "(read-string (second (str/split  \\"tagname@{key\:val}\\" \#\\"@\\")))" "(read-string (second (str/split  \\"tagname@{key val}\\" \#\\"@\\")))" "{\\"key\\" \= \\"val\\"}" "(re-seq \#\\"\\\\w+\\" (second (str/split  \\"tagname@[key\=val key1\=val1]\\" \#\\"@\\")))" "(hash-map (re-seq \#\\"\\\\w+\\" (second (str/split  \\"tagname@[key\=val key1\=val1]\\" \#\\"@\\"))))" "(apply hash-map (re-seq \#\\"\\\\w+\\" (second (str/split  \\"tagname@[key\=val key1\=val1]\\" \#\\"@\\"))))" "(flatten ({\:k 5} ({\:f 5}{\:g 8})))" "(seq ({\:k 5} ({\:f 5}{\:g 8})))" "(vector ({\:k 5} ({\:f 5}{\:g 8})))" "(flatten ({\:k 5} ({\:f 5} {\:g 8})))" "(vec ({\:k 5} ({\:f 5} {\:g 8})))" "(concat ({\:k 5}) ({\:f 5} {\:g 8}))" "(concat '({\:k 5}) '({\:f 5} {\:g 8}))" "(flatten '({\:k 5} '({\:f 5} {\:g 8})))" "(flatten '({\:k 5} ({\:f 5} {\:g 8})))" "((fn [elem exp] (filter \#(\= (keyword elem) (% \:tag)) (exp \:content))) \\"c\\" {\:tag \:a \:content [\\"text\\" {\:tag \:c \:content []} {\:tag \:c \:content [1]} ]})" "((fn [elem exp] (filter \#(and (yummy-object? exp) (\= (keyword elem) (% \:tag))) (exp \:content))) \\"c\\" {\:tag \:a \:content [\\"text\\" {\:tag \:c \:content []} {\:tag \:c \:content [1]} ]})" "(str/split \\"*/c\\" \\"/\\")" "(str/split \\"*/c\\" \#\\"/\\")" "(retrieve {\:tag \:a \:content []} \\"a\\")" "(retrieve {\:tag \:a \:content [] \:attrs {}} \\"a\\")" "(str/split \#\\"@\\" \\"tralala\\")" "(str/split  \\"tralala\\" \#\\"@\\")" "(compare {} {})" "(compare {\:a \:b \:c [\\"d\\"]} {\:c [\\"d\\"] \:a \:b})" "(diff {\:a \:b \:c [\\"d\\"]} {\:c [\\"d\\"] \:a \:b})" "(clojure.data/diff {\:a \:b \:c [\\"d\\"]} {\:c [\\"d\\"] \:a \:b})" "(use 'clojure.data)" "(diff {\:a \:b \:c [\\"d\\"]} {\:c [\\"d\\"] \:a \:b})" "(map-cmp {\:a \:b \:c [\\"d\\"]} {\:c [\\"d\\"] \:a \:b})" "(map-cmp {\:a \:b \:c [\\"e\\"]} {\:c [\\"d\\"] \:a \:b})" "(map-cmp {\:a \:b \:c [\\"d\\"] \:d {\:k \\"v\\"}} {\:c [\\"d\\"] \:a \:b \:d {\:k \\"v\\"}})" "(map-cmp {\:a \:b \:c [\\"d\\"] \:d {\:k \\"v\\"}} {\:c [\\"d\\"] \:a \:b \:d {\:k \\"w\\"}})" "(str/split \\"[key\=val,k\=3]\\" \#\\"\=[],.\\")" "(re-seq \#\\"\\\\w+\\" \\"[key\=val,k\=3]\\")" "(yummy-object? {\:tag \:a \:attrs {} \:content []})" "(yummy-object? {\:tag \:a \:attrs {\:k \\"c\\"} \:content []})" "(yummy-object? {\:tag \:a \:attrs {\:k 3} \:content []})" "(yummy-object? {\:tag \:a \:attrs {\\"k\\" \\"c\\"} \:content []})" "(get-attrs [\\"a\\" \\"[key\=val,k\=2]\\"])" "(diff  {\:key val, \:k 5} {\:key val})" "(not-any? false? '(false false))" "(any? false? '(false false))" "(every? false? '(false false))" "(reduce \#(if (\= %2 \\"..\\") (pop %1) (cons %2 %1)) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") (pop %1) (into %2 %1)) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") (pop %1) (conj %1 %2)) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") ((println \\"removing\\")(pop %1)) ((println \\"adding \\" %1)(conj %1 %2))) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") ((println \\"removing\\")(pop %1)) ((println \\"adding \\" %2)(conj %1 %2))) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") ((println \\"removing\\") (pop %1)) ((println \\"adding \\" %2) (conj %1 %2))) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") (pop %1) (conj %1 %2)) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") (pop %1) (conj %1 %2)) [] [\\"a\\" \\"b\\" \\"..\\" \\"c\\"])" "(reduce \#(if (\= %2 \\"..\\") (pop %1) (conj %1 %2)) [] [\\"a\\" \\"..\\" \\"..\\" \\"c\\"])" "(reduce \#(if (and (\= %2 \\"..\\") (not-empty %1)) (pop %1) (conj %1 %2)) [] [\\"a\\" \\"b\\" \\"..\\" \\"..\\" \\"c\\"])" "(str/split \\"//af/sd/df\\" \#\\"/\\")" "(str/split \\"$/af/sd/df\\" \#\\"/\\")" "(rest [\\"$\\" \\"af\\" \\"sd\\" \\"df\\"])" "(next [\\"$\\" \\"af\\" \\"sd\\" \\"df\\"])"]
eclipse.preferences.version=1
